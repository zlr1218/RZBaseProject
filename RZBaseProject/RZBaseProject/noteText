
0.197326
4.324608



NSError codes in the Cocoa error domain.

enum {
NSFileNoSuchFileError = 4,  // 文件不存在
NSFileLockingError = 255,  // 未能得到一个锁文件
NSFileReadUnknownError = 256,   // 读取错误,原因不明
NSFileReadNoPermissionError = 257, // 读取错误是因为权限问题
NSFileReadInvalidFileNameError = 258, // 读取错误,因为一个无效的文件名
NSFileReadCorruptFileError = 259,  // 读取错误,因为一个损坏的文件,错误的格式,或类似的原因
NSFileReadNoSuchFileError = 260,  // 读取错误,因为没有这样的文件
NSFileReadInapplicableStringEncodingError = 261,  // 读取错误,因为字符串编码并不适用。
NSFileReadUnsupportedSchemeError = 262,  // 读取错误,因为指定的URL方案是不支持的
NSFileReadTooLargeError = 263, //  指定读取错误,因为文件太大。
NSFileReadUnknownStringEncodingError = 264, // 文件读取错误,因为字符串编码无法确定
NSFileWriteUnknownError = 512,  // 写错误,原因不明
NSFileWriteNoPermissionError = 513,  // 写错误,因为权限问题
NSFileWriteInvalidFileNameError = 514,  // 写错误,因为一个无效的文件名
NSFileWriteInapplicableStringEncodingError = 517,  // 写错误,因为字符串编码并不适用。
NSFileWriteUnsupportedSchemeError = 518,  // 写错误,因为指定的URL方案是不支持的
NSFileWriteOutOfSpaceError = 640,  // 写错误,因为缺少磁盘空间
NSFileWriteVolumeReadOnlyError = 642 // 写错误,因为体积是只读的。
NSKeyValueValidationError = 1024,  // 键值编码验证错误
NSFormattingError = 2048,  // 格式错误(显示相关数据)
NSUserCancelledError = 3072, // 用户取消了操作(例如,按下Command-period)。这段代码是错误不需要一个对话框显示为代价和可能的候选人。

NSFileErrorMinimum = 0, // 标志着开始的一系列错误代码保留文件错误
NSFileErrorMaximum = 1023, // 标志着结束的一系列错误代码保留文件错误
NSValidationErrorMinimum = 1024,  // 标志着开始的一系列错误代码用于验证错误。
NSValidationErrorMaximum = 2047,  // 标志的开始和结束的范围错误代码用于验证错误。
NSFormattingErrorMinimum = 2048, // 标志着开始的一系列错误代码用于格式化错误。
NSFormattingErrorMaximum = 2559,  // 标志着结束的范围错误代码用于格式化错误。

NSPropertyListReadCorruptError = 3840,  // 错误的出处,同时解析属性列表。
NSPropertyListReadUnknownVersionError = 3841,  // 版本号的属性列表无法确定。
NSPropertyListReadStreamError = 3842,  // 一个流错误阅读时遇到的属性列表。
NSPropertyListWriteStreamError = 3851,  // 一个流的错误在写作时所遇到的属性列表。
NSPropertyListErrorMinimum = 3840,  // 标志着开始的一系列错误代码留给属性列表错误。
NSPropertyListErrorMaximum = 4095,  // 标志着结束的范围错误代码留给属性列表错误。

NSExecutableErrorMinimum = 3584,  // 标志着开始的一系列错误代码保留错误相关的可执行文件。
NSExecutableNotLoadableError = 3584,  // 可执行的类型不是可加载在当前过程。
NSExecutableArchitectureMismatchError = 3585,  // 可执行文件没有提供一个架构兼容当前进程。
NSExecutableRuntimeMismatchError = 3586,  // 可执行目标C运行时信息不符合当前进程。
NSExecutableLoadError = 3587,  // 无法加载，因为一些其他的原因
NSExecutableLinkError = 3588,  // 可执行的失败由于连接问题。

NSExecutableErrorMaximum = 3839, // 标志着结束的范围错误代码保留错误相关的可执行文件。

}
URL Loading System Error Codes

These values are returned as the error code property of an NSError object with the domain “NSURLErrorDomain”.

typedef enum
{
NSURLErrorUnknown = -1,   // "无效的URL地址"
NSURLErrorCancelled = -999,  // "无效的URL地址"
NSURLErrorBadURL = -1000,  // "无效的URL地址"
NSURLErrorTimedOut = -1001,  // "网络不给力，请稍后再试"
NSURLErrorUnsupportedURL = -1002,  // "不支持的URL地址"
NSURLErrorCannotFindHost = -1003,  // "找不到服务器"
NSURLErrorCannotConnectToHost = -1004,  // "连接不上服务器"
NSURLErrorDataLengthExceedsMaximum = -1103,  // "请求数据长度超出最大限度"
NSURLErrorNetworkConnectionLost = -1005,  // "网络连接异常"
NSURLErrorDNSLookupFailed = -1006,  // "DNS查询失败"
NSURLErrorHTTPTooManyRedirects = -1007,  // "HTTP请求重定向"
NSURLErrorResourceUnavailable = -1008,  // "资源不可用"
NSURLErrorNotConnectedToInternet = -1009,  // "无网络连接"
NSURLErrorRedirectToNonExistentLocation = -1010,  // "重定向到不存在的位置"
NSURLErrorBadServerResponse = -1011,  // "服务器响应异常"
NSURLErrorUserCancelledAuthentication = -1012,  // "用户取消授权"
NSURLErrorUserAuthenticationRequired = -1013,  // "需要用户授权"
NSURLErrorZeroByteResource = -1014,  // "零字节资源"
NSURLErrorCannotDecodeRawData = -1015,  // "无法解码原始数据"
NSURLErrorCannotDecodeContentData = -1016,  // "无法解码内容数据"
NSURLErrorCannotParseResponse = -1017,  // "无法解析响应"
NSURLErrorInternationalRoamingOff = -1018, // "国际漫游关闭"
NSURLErrorCallIsActive = -1019, // "被叫激活"
NSURLErrorDataNotAllowed = -1020, // "数据不被允许"
NSURLErrorRequestBodyStreamExhausted = -1021, // "请求体"
NSURLErrorFileDoesNotExist = -1100,  // "文件不存在"
NSURLErrorFileIsDirectory = -1101,  // "文件是个目录"
NSURLErrorNoPermissionsToReadFile = -1102,  // "无读取文件权限"
NSURLErrorSecureConnectionFailed = -1200,  // "安全连接失败"
NSURLErrorServerCertificateHasBadDate = -1201,  // "服务器证书失效"
NSURLErrorServerCertificateUntrusted = -1202, // "不被信任的服务器证书"
NSURLErrorServerCertificateHasUnknownRoot = -1203,  // "未知Root的服务器证书"
NSURLErrorServerCertificateNotYetValid = -1204,  // "服务器证书未生效"
NSURLErrorClientCertificateRejected = -1205,  // "客户端证书被拒"
NSURLErrorClientCertificateRequired = -1206,  // "需要客户端证书"
NSURLErrorCannotLoadFromNetwork = -2000,  // "无法从网络获取"
NSURLErrorCannotCreateFile = -3000,  // "无法创建文件"
NSURLErrorCannotOpenFile = -3001,  // "无法打开文件"
NSURLErrorCannotCloseFile = -3002,  // "无法关闭文件"
NSURLErrorCannotWriteToFile = -3003,  // "无法写入文件"
NSURLErrorCannotRemoveFile = -3004, // "无法删除文件"
NSURLErrorCannotMoveFile = -3005,  // "无法移动文件"
NSURLErrorDownloadDecodingFailedMidStream = -3006,  // "下载解码数据失败"
NSURLErrorDownloadDecodingFailedToComplete = -3007  // "下载解码数据失败"
}


// dispatchTimer
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<#n#> * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
<#coding#>
});

// method
- (<#type#>)<#name#> {
<#code#>
}

// pa ps pc
@property (nonatomic, assign) <#type#> <#name#>;    /**< <#note#> */
@property (nonatomic, strong) <#type#> *<#name#>;    /**< <#note#> */
@property (nonatomic, assign) <#type#> <#name#>;    /**< <#note#> */

// tableview创建

static NSString *const reuseCell_ID = @"cell";
- (void)setupUI {

[self.TableView registerClass:[UITableViewCell class] forCellReuseIdentifier:reuseCell_ID];

}

#pragma mark - TableView的协议方法
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
return 5;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:reuseCell_ID];
if (!cell) {
cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:reuseCell_ID];
}
cell.textLabel.text = self.arrayTitle[indexPath.row];

return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {

}


#pragma mark - 懒加载
- (UITableView *)TableView {
if (!_TableView) {
//CGRect rect = CGRectMake(<#CGFloat x#>, <#CGFloat y#>, <#CGFloat width#>, <#CGFloat height#>);
_TableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];

_TableView.delegate = self;
_TableView.dataSource = self;

[self.view addSubview:self.TableView];
}
return _TableView;
}






- (void)start {
if (_centralManager.state & CBCentralManagerStatePoweredOn) {
CENTRAL_MANAGER_INIT_WAIT_TIMES = 0;
if (!self.connectedPeripheral) {
[self scanForPeripheral];
}
return;
}
CENTRAL_MANAGER_INIT_WAIT_TIMES++;
if (CENTRAL_MANAGER_INIT_WAIT_TIMES >= 5) {
RZLog(@">>> 第%d次等待CBCentralManager 打开任然失败，请检查你蓝牙使用权限或检查设备问题。",CENTRAL_MANAGER_INIT_WAIT_TIMES);
return;
}
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW , CENTRALMANAGER_INIT_WAIT_SECOND * NSEC_PER_SEC);
dispatch_after(popTime, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
[self start];
});
RZLog(@">>> 第%d次等待CBCentralManager打开",CENTRAL_MANAGER_INIT_WAIT_TIMES);
}



/*
[<7d080000 00000000 00323100 00000000 0000007d>,
<7d080000 00000000 00323200 00000000 0000007d>,
<7d080000 00000000 00323300 00000000 0000007d>,
<7d080000 00000000 00323400 00000000 0000007d>,
<7d080000 00000000 00323500 00000000 0000007d>,
<7d080000 00000000 00323600 00000000 0000007d>,
<7d080000 00000000 00323700 00000000 0000007d>]
*/




- (void)createBle {
_ble = [RZBLE shareInstance];
[_ble setIsNotify:YES];
[_ble settingPeripheralMacAdress:@"0c61cf297409" Name:@"BLE#0x0C61CF297409"];
[_ble start];
__weak typeof(self) weakSelf = self;
[_ble setBlockOnDiscoverPeripherals02:^(NSMutableArray *dataArr) {
weakSelf.dataArr = dataArr;
NSMutableArray *indexPathArr = [NSMutableArray array];
NSIndexPath *indexPath = [NSIndexPath indexPathForRow:(dataArr.count-1) inSection:0];
[indexPathArr addObject:indexPath];
[weakSelf.bleTableView insertRowsAtIndexPaths:indexPathArr withRowAnimation:UITableViewRowAnimationAutomatic];
}];
[_ble setBlockOnUpdateCharacteristic:^(CBPeripheral *peripheral, CBCharacteristic *characteristic, NSError *error) {
NSData *data = characteristic.value;
NSString *dataString = [NSString stringWithFormat:@"%@", data];
if ([dataString hasPrefix:@"<7d"] && [dataString hasSuffix:@"7d>"]) {
RZLog(@"characteristic.UUID = %@\ncharacteristic.value = %@", characteristic.UUID, characteristic.value);
NSArray *strArr = [dataString componentsSeparatedByString:@" "];
NSString *string01 = [strArr[2] substringWithRange:NSMakeRange(4, 2)];
NSString *string02 = [strArr[2] substringWithRange:NSMakeRange(6, 2)];
RZLog(@"%@ - %@", string01, string02);
weakSelf.textView.text = [NSString stringWithFormat:@"%@\n%@%@", dataString,weakSelf.cmdDict[string01], weakSelf.backDict[string02]];
}
}];
}




switch (central.state) {
case 0:
NSLog(@"CBCentralManagerStateUnknown");
break;
case 1:
NSLog(@"CBCentralManagerStateResetting");
break;
case 2:
NSLog(@"CBCentralManagerStateUnsupported");//不支持蓝牙
break;
case 3:
NSLog(@"CBCentralManagerStateUnauthorized");
break;
case 4:
NSLog(@"CBCentralManagerStatePoweredOff");//蓝牙未开启
break;
case 5:{
NSLog(@"CBCentralManagerStatePoweredOn");//蓝牙已开启
if (_macAdress && _peripheralName && _connectedPeripheral==nil) {
[_centralManager scanForPeripheralsWithServices:nil options:nil];
}
}
break;
default:
break;
}



#pragma mark - 懒加载-企业数据

- (NSMutableArray *)cellTypeArray {
if (!_cellTypeArray) {
_cellTypeArray = [NSMutableArray array];
[_cellTypeArray addObject:@[@"TF",@"TF",@"Lab",@"DLab"]];
[_cellTypeArray addObject:@[@"TF",@"TF",@"TF",@"TF"]];
[_cellTypeArray addObject:@[@"Lab"]];
}
return _cellTypeArray;
}
- (NSMutableArray *)nameArray {
if (!_nameArray) {
_nameArray = [NSMutableArray array];
[_nameArray addObject:@[@"发票抬头",@"税号",@"发票内容",@"发票金额"]];
[_nameArray addObject:@[@"收件人",@"联系电话",@"详细地址",@"备注"]];
[_nameArray addObject:@[@"发票邮费"]];
}
return _nameArray;
}
- (NSMutableArray *)placeholderArray {
if (!_placeholderArray) {
_placeholderArray = [NSMutableArray array];
[_placeholderArray addObject:@[@"请填写发票抬头名称",@"填写纳税人识别号",@"租赁费",@"¥00.00"]];
[_placeholderArray addObject:@[@"填写收件人",@"填写联系电话",@"填写详细收货地址",@"特殊说明"]];
[_placeholderArray addObject:@[@"货到付款"]];
}
return _placeholderArray;
}

#pragma mark - 懒加载-个人数据

- (NSMutableArray *)cellTypeArray_02 {
if (!_cellTypeArray_02) {
_cellTypeArray_02 = [NSMutableArray array];
[_cellTypeArray_02 addObject:@[@"TF",@"Lab",@"DLab"]];
[_cellTypeArray_02 addObject:@[@"TF",@"TF",@"TF",@"TF"]];
[_cellTypeArray_02 addObject:@[@"Lab"]];
}
return _cellTypeArray_02;
}
- (NSMutableArray *)nameArray_02 {
if (!_nameArray_02) {
_nameArray_02 = [NSMutableArray array];
[_nameArray_02 addObject:@[@"发票抬头",@"发票内容",@"发票金额"]];
[_nameArray_02 addObject:@[@"收件人",@"联系电话",@"详细地址",@"备注"]];
[_nameArray_02 addObject:@[@"发票邮费"]];
}
return _nameArray_02;
}
- (NSMutableArray *)placeholderArray_02 {
if (!_placeholderArray_02) {
_placeholderArray_02 = [NSMutableArray array];
[_placeholderArray_02 addObject:@[@"请填写发票抬头名称",@"租赁费",@"¥00.00"]];
[_placeholderArray_02 addObject:@[@"填写收件人",@"填写联系电话",@"填写详细收货地址",@"特殊说明"]];
[_placeholderArray_02 addObject:@[@"货到付款"]];
}
return _placeholderArray_02;
}











mark - 轻享个人信息-cell

/*
UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"cell"];
if (!cell) {
cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"cell"];
}
if (indexPath.section == 0) {
PersonTableViewCell *Pcell = [[PersonTableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Pcell"];
Pcell.titleLabel.text = self.TitleArr[indexPath.row];
Pcell.SubtitleLabel.text = self.SubtitArr[indexPath.row];
if (indexPath.row == 0) {
[Pcell.contentView addSubview:self.HeadImage];
[Pcell.contentView addSubview:self.AccImage];
}else if (indexPath.row == 1 )
{
UIImageView *accimage = [[UIImageView alloc]init];
accimage.image = [UIImage imageNamed:@"acciamge"];
accimage.frame = CGRectMake(SCREEN_WIDTH - 20 - 6, 20, 6, 12);
[Pcell.contentView addSubview:accimage];
}

Pcell.selectionStyle = UITableViewCellSelectionStyleNone;
return Pcell;
}else if (indexPath.section == 1)
{
PerCertificationTableViewCell *Tcell = [[PerCertificationTableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Tcell"];
Tcell.titLabel.text = self.RenzhenArr[indexPath.row];
//        Tcell.titLabel.textColor = UIColorRGBA(180, 180, 180, 1);
//        Tcell.titLabel.font = [UIFont systemFontOfSize:14];


//        if (indexPath.row == 2) {
//            //芝麻信用认证
//            self.zhimaButton = [UIButton buttonWithType:UIButtonTypeCustom];
//            if ([self.zhimaStatus isEqualToString:@"1"]) {
//                self.zhimaButton.enabled = NO;
//            }else
//            {
//                self.zhimaButton.enabled = YES;
//            }
//
//            [self.zhimaButton setBackgroundImage:[UIImage imageNamed:@"NextButtonPic"] forState:UIControlStateNormal];
//            [self.zhimaButton setBackgroundImage:[UIImage imageNamed:@"whiteDaohang"] forState:UIControlStateDisabled];
//            [self.zhimaButton setTitleColor:UIColorRGBA(180, 180, 180, 1) forState:UIControlStateDisabled];
//            [self.zhimaButton setTitle:@"认证" forState:UIControlStateNormal];
//            self.zhimaButton.titleLabel.font = [UIFont systemFontOfSize:14];
//            self.zhimaButton.frame = CGRectMake(SCREEN_WIDTH - 60 - 20, 14, 60, 28);
//
//            [Tcell.contentView addSubview:self.zhimaButton];
//            [self.zhimaButton addTarget:self action:@selector(ClickZhimaButton) forControlEvents:UIControlEventTouchUpInside];
//            Tcell.LineLable.backgroundColor = [UIColor clearColor];
//
//        }else
if(indexPath.row == 0)
{
//身份认证
self.ShenfenButton = [UIButton buttonWithType:UIButtonTypeCustom];
NSLog(@"%@",self.IdCardStr);
if ([self.JiashiState isEqualToString:@"1"]) {
self.ShenfenButton.enabled = NO;
}else
{
self.ShenfenButton.enabled = YES;
}
//
[self.ShenfenButton setBackgroundImage:[UIImage imageNamed:@"NextButtonPic"] forState:UIControlStateNormal];
[self.ShenfenButton setBackgroundImage:[UIImage imageNamed:@"whiteDaohang"] forState:UIControlStateDisabled];
[self.ShenfenButton setTitleColor:UIColorRGBA(180, 180, 180, 1) forState:UIControlStateDisabled];
[self.ShenfenButton setTitle:@"认证" forState:UIControlStateNormal];
self.ShenfenButton.titleLabel.font = [UIFont systemFontOfSize:14];
self.ShenfenButton.frame = CGRectMake(SCREEN_WIDTH - 60 - 20, 14, 60, 28);
[Tcell.contentView addSubview:self.ShenfenButton];
[self.ShenfenButton addTarget:self action:@selector(ClickREnzhng) forControlEvents:UIControlEventTouchUpInside];

}
else if(indexPath.row == 1)
{
//驾驶认证
self.RenzhengBUtton = [UIButton buttonWithType:UIButtonTypeCustom];

if ([self.IdCardStr isEqualToString:@"1"]) {
self.RenzhengBUtton.enabled = NO;
}else
{
self.RenzhengBUtton.enabled = YES;
}

[self.RenzhengBUtton setBackgroundImage:[UIImage imageNamed:@"NextButtonPic"] forState:UIControlStateNormal];
[self.RenzhengBUtton setBackgroundImage:[UIImage imageNamed:@"whiteDaohang"] forState:UIControlStateDisabled];
[self.RenzhengBUtton setTitleColor:UIColorRGBA(180, 180, 180, 1) forState:UIControlStateDisabled];
[self.RenzhengBUtton setTitle:@"认证" forState:UIControlStateNormal];
self.RenzhengBUtton.titleLabel.font = [UIFont systemFontOfSize:14];
self.RenzhengBUtton.frame = CGRectMake(SCREEN_WIDTH - 60 - 20, 14, 60, 28);
[Tcell.contentView addSubview:self.RenzhengBUtton];
[self.RenzhengBUtton addTarget:self action:@selector(ClickSHenfen) forControlEvents:UIControlEventTouchUpInside];
}

Tcell.selectionStyle = UITableViewCellSelectionStyleNone;
return Tcell;
}
cell.selectionStyle = UITableViewCellSelectionStyleNone;
return cell;
*/




// 我的培训列表 单条数据
{
    planId = 31;
    evaluationStatus = 0;
    way = 2;
    updaterId = 55850;
    orgId = <null>;
    personNum = <null>;
    classHour = <null>;
    classCategoryName = <null>;
    updateTime = 2021-01-21 13:56:49;
    creatorId = 55850;
    classSubject = <null>;
    pictureUrl = <null>;
    endTime = 2021-01-23 23:59:59;
    appKey = <null>;
    ruleId = 2;
    classStatus = 3;
    classCategory = 5;
    classType = <null>;
    id = 156;
    briefIntroduction = 12474114848943213512431354165;
    isPass = 1;
    className = 瑞仔培训01;
    trainingUnit = 中安华邦;
    principalId = 55877;
    trainingObject = ;
    trainingAddress = ;
    principalName = 10;
    startTime = 2021-01-21 00:00:00;
    createTime = 2021-01-21 13:56:49;
    creatorName = 路飞;
    attendance = 50;
}









/*
#pragma mark -
#pragma mark - tableViewDelegate/tableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    
    return self.listDatas.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    QAHomeCarouselModel *model = self.listDatas[indexPath.row];

    return [self getCellStyleHeigt:[model.functionType integerValue] withArray:model.infos];
}



- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    QAHomeCarouselModel *model = self.listDatas[indexPath.row];
    return [self chooseCellStyle:[model.functionType integerValue] withTableView:tableView withIndex:indexPath.row];
}


#pragma mark - Other
- (QABaseTableViewCell *)chooseCellStyle:(NSInteger )style withTableView:(UITableView *)tableView withIndex:(NSInteger )index
{
    WeakSelf(self);
    QAHomeCarouselModel *model = self.listDatas[index];
    switch (style) {
        case QAHomeCellCarousel:
        {
            QACarouselTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QACarouselTableViewCell)];
            if (!cell) {
                cell = [[QACarouselTableViewCell alloc] initWithReuseIdentifier:ZAIdentifiers(QACarouselTableViewCell) accessType:0];
            }
            cell.bottomLine.hidden = YES;
            cell.carouselView.delegate = self;
            cell.carouselView.imageArray = [self setCarouselIconArray];

            return cell;
        }
            break;
            
            case QAHomeCellTransform:
        {
            QAHomeMenuCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QAHomeMenuCell)];
            if (!cell) {
                cell = [[QAHomeMenuCell alloc]initWithReuseIdentifier:ZAIdentifiers(QAHomeMenuCell) accessType:QACellAccessoryTypeNone];
            }
            cell.menuArray = [self setMenuData:model.infos];
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself menuBlockEventWithModel:data];
            };
            return cell;
        }
            break;
            
            case QAHomeCellMessage:
        {
            QAHomeMessageCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QAHomeMessageCell)];
            if (!cell) {
                cell = [[QAHomeMessageCell alloc]initWithReuseIdentifier:ZAIdentifiers(QAHomeMessageCell) accessType:QACellAccessoryTypeNone];
            }
            cell.bottomLine.hidden = YES;
            cell.model = [QAHomeCarouselDetailsModel new];
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself messageClick];
            };
            return cell;
        }
            break;
 
            case QAHomeCellRecomment_course:
        {
            QACourseCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QACourseCell)];
            if (!cell) {
                cell = [[QACourseCell alloc]initWithReuseIdentifier:ZAIdentifiers(QACourseCell) accessType:QACellAccessoryTypeNone];
            }
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself courseBlock:data];
            };
            cell.bottomLine.hidden = YES;
            cell.model = model;
            [cell updateVoideUIWithIs:NO];
            return cell;
            
//            QAHomeVideoCell *cell = [tableView dequeueReusableCellWithIdentifier:@"QAHomeVideoCell"];
//            if (!cell) {
//                cell = [[NSBundle mainBundle] loadNibNamed:@"QAHomeVideoCell" owner:self options:nil].lastObject;
//            }
//
//            NSInteger idx = index%2 + index;
//            QAHomeCarouselDetailsModel *modelLeft = model.infos[idx];
//            cell.dataL = @{@"name": modelLeft.title,
//                           @"icon": modelLeft.icon,
//                           @"desc": modelLeft.subTitle};
//            if (idx+1 < model.infos.count) {
//                QAHomeCarouselDetailsModel *modelRight = model.infos[idx+1];
//                cell.dataL = @{@"name": modelRight.title,
//                               @"icon": modelRight.icon,
//                               @"desc": modelRight.subTitle};
//            }
//
//
//            return cell;
        }
            break;
            
            case QAHomeCellNews:
        {
            QAHomeNewsCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QAHomeNewsCell)];
            if (!cell) {
                cell = [[QAHomeNewsCell alloc]initWithReuseIdentifier:ZAIdentifiers(QAHomeNewsCell) accessType:QACellAccessoryTypeNone];
            }
            cell.bottomLine.hidden = YES;
            cell.model = model;
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself newsClick:data];
            };
            return cell;
        }
            break;
            

            case QAHomeCellVideo:
        {
            QACourseCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QACourseCell)];
            if (!cell) {
                cell = [[QACourseCell alloc]initWithReuseIdentifier:ZAIdentifiers(QACourseCell) accessType:QACellAccessoryTypeNone];
            }
            cell.bottomLine.hidden = YES;
            cell.model = model;
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself voideClick:data];
            };
            [cell updateVoideUIWithIs:YES];
            return cell;
        }
            break;
            
            case QAHomeCellTeacher:
        {
            QATeacherCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QATeacherCell)];
            if (!cell) {
                cell = [[QATeacherCell alloc]initWithReuseIdentifier:ZAIdentifiers(QATeacherCell) accessType:QACellAccessoryTypeNone];
            }
            cell.bottomLine.hidden = YES;
            cell.model = model;
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself teacherClick:data];
            };
            return cell;
        }
            break;
            
            case QAHomeCellRadio:
        {
            QAHomeRadioCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QAHomeRadioCell)];
            if (!cell) {
                cell = [[QAHomeRadioCell alloc]initWithReuseIdentifier:ZAIdentifiers(QAHomeRadioCell) accessType:QACellAccessoryTypeNone];
            }
            cell.bottomLine.hidden = YES;
            cell.model = model;
            cell.baseCellClickBlock = ^(id  _Nonnull data) {
                [weakself audioClick:data];
            };
            return cell;
        }
            break;
            
            case QAHomeCellStar:
        {
            QAHomeStarCell *cell = [tableView dequeueReusableCellWithIdentifier:ZAIdentifiers(QAHomeStarCell)];
            if (!cell) {
                cell = [[QAHomeStarCell alloc]initWithReuseIdentifier:ZAIdentifiers(QAHomeStarCell) accessType:QACellAccessoryTypeNone];
            }
            cell.bottomLine.hidden = YES;
            cell.model = model;
            return cell;
        }
            break;
        default:
            return [QABaseTableViewCell new];
            break;
    }
    
}


- (NSInteger )getCellStyleHeigt:(NSInteger )type withArray:(NSArray *)list
{
    switch (type) {
        case QAHomeCellCarousel:
            return 190*screenRate;;
            break;
            
            case QAHomeCellTransform:
            return list.count > 5 ? 180*screenRate : 100*screenRate;
            break;
            
            case QAHomeCellMessage:
            return 40*screenRate;
            break;
            
            case QAHomeCellRecomment_course:
            return 430*screenRate;
            break;

            case QAHomeCellNews:
            return 350*screenRate+50*screenRate;
            break;
            
            case QAHomeCellVideo:
            return 380*screenRate;
            break;
            
            case QAHomeCellTeacher:
            return 350*screenRate;
            break;
            
            case QAHomeCellRadio:
            return 290*screenRate;
            break;
 
            case QAHomeCellStar:
            return 360*screenRate;
            break;
        default:
            return 0;
            break;
    }
}


// 读取本地JSON文件
- (NSDictionary *)readLocalFileWithName:(NSString *)name {
    // 获取文件路径
    NSString *path = [[NSBundle mainBundle] pathForResource:name ofType:@"json"];
    // 将文件数据化
    NSData *data = [[NSData alloc] initWithContentsOfFile:path];
    // 对数据进行JSON格式化并返回字典形式
    return [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];
}
*/





    if (model.tasktype == 1) {// 在线课程
        
        if (model.handleStatus == 1) {
            // 显示开始时间、按钮置灰，显示未开始
        } else if (model.handleStatus == 2) {
            // 显示截止时间、按钮取消置灰，显示去学习
        } else if (model.handleStatus == 3) {
            // 显示截止时间、按钮置灰，显示已过期
        }
        
        if ([model.status isEqualToString:@"1"]) {
            self.statusLab.text = @"未开始";
        } else if ([model.status isEqualToString:@"2"]) {
            self.statusLab.text = @"已完成";
        } else if ([model.status isEqualToString:@"3"]) {
            self.statusLab.text = @"进行中";
        } else {
            self.statusLab.text = @"已过期";
        }
    } else if (model.tasktype == 2 || model.tasktype == 3) {// 在线考试、在线练习
        if (model.tasktype == 2) {
            [self.taskTypeBtn setTitle:@"在线考试" forState:UIControlStateNormal];
        } else {
            [self.taskTypeBtn setTitle:@"在线练习" forState:UIControlStateNormal];
        }
        
        if (model.handleStatus == 1) {
            // 显示开始时间、按钮置灰，显示未开始
        } else if (model.handleStatus == 2) {
            // 显示截止时间、按钮取消置灰，显示去考试、去练习
        } else if (model.handleStatus == 3) {
            // 显示截止时间、按钮置灰，显示已过期
        }
        
        if ([model.status isEqualToString:@"1"]) {
            self.statusLab.text = [NSString stringWithFormat:@"未开始 0.00/%@", model.taskHours];
        } else if ([model.status isEqualToString:@"2"]) {
            self.statusLab.text = [NSString stringWithFormat:@"已完成 %@/%@", model.taskHours, model.taskHours];
        } else if ([model.status isEqualToString:@"3"]) {
            self.statusLab.text = [NSString stringWithFormat:@"已学 %@/%@", hourText, model.taskHours];
        } else {
            self.statusLab.text = [NSString stringWithFormat:@"已过期 0.00/%@", model.taskHours];
        }
    } else {
        // 推荐课程
        self.goBtn.userInteractionEnabled = NO;
        self.goBtn.alpha = 0.4;
    }
    
    
    
    
    #pragma mark - 电话检测

//- (void)initCallObserver {
//    if (@available(iOS 10.0, *)) {
//        self.callObserver = [CXCallObserver new];
//        [self.callObserver setDelegate:self queue:dispatch_get_main_queue()];
//    } else {
//
//    }
//}

//- (void)callObserver:(CXCallObserver *)callObserver callChanged:(CXCall *)call  API_AVAILABLE(ios(10.0)){
//
//    RZLog(@"outgoing :%d  onHold :%d   hasConnected :%d   hasEnded :%d",call.outgoing,call.onHold,call.hasConnected,call.hasEnded);
//    NSInteger outgoing = call.outgoing;
//    NSInteger onHold = call.onHold;
//    NSInteger hasConnected = call.hasConnected;
//    NSInteger hasEnded = call.hasEnded;
//
//    /*
//     拨打:  outgoing :1  onHold :0   hasConnected :0   hasEnded :0
//     拒绝:  outgoing :0  onHold :0   hasConnected :0   hasEnded :1
//     链接:  outgoing :1  onHold :0   hasConnected :1   hasEnded :0
//     挂断:  outgoing :1  onHold :0   hasConnected :0   hasEnded :1
//     对方未接听时挂断：  outgoing :1  onHold :0   hasConnected :0   hasEnded :1
//
//     新来电话:    outgoing :0  onHold :0   hasConnected :0   hasEnded :0
//     保留并接听:  outgoing :1  onHold :1   hasConnected :1   hasEnded :0
//     另一个挂掉:  outgoing :0  onHold :0   hasConnected :1   hasEnded :0
//     保持链接:    outgoing :1  onHold :0   hasConnected :1   hasEnded :1
//     对方挂掉:    outgoing :0  onHold :0   hasConnected :1   hasEnded :1
//    */
//    BOOL isOutCall = NO;
//
//    if (outgoing == 0 && hasEnded && onHold==0 && hasConnected ==0) {
//        RZLog(@"----拒绝");
//        isOutCall = YES;
//
//    }else if (outgoing && onHold==0 && hasConnected == 0 && hasEnded){
//        RZLog(@"----挂断");
//        isOutCall = YES;
//
//    }else if (hasConnected && outgoing == 0 && onHold == 0 && hasEnded == 0){
//        RZLog(@"----另一个挂掉");
//        isOutCall = YES;
//
//    }else if (hasConnected && outgoing == 0 && onHold == 0 && hasEnded){
//        RZLog(@"----对方挂掉 ");
//        isOutCall = YES;
//    }
//
//    if (isOutCall) {
//        [self.playerContianerView play];
//    } else {
//        [self.playerContianerView pause];
//    }
//}

- (void)dealloc {
//    if (self.callObserver) {
//        [self.callObserver setDelegate:nil queue:dispatch_get_main_queue()];
//        self.callObserver = nil;
//    }
}
